// This file has been autogenerated from parsing an Objective-C header file added in Xcode.
using System;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.Foundation;
using System.Collections.Generic;
using MonoTouch.CoreLocation;

namespace FrameWorkApp
{
	public partial class TripSummaryScreen : UIViewController
	{

		SDMFileManager fileManager = new SDMFileManager();
		RawGPS rawGPS = new RawGPS();
		private static Event[] importedGpsEvents;
		double totalDistance;
		int pointChange=0;
		const int UNKNOWN_EVENT_TYPE= 0;
		const int HARD_BRAKE_TYPE= 1;
		const int HARD_ACCEL_TYPE= 2;
		private int numberOfStops = 0;
		private int numberOfStarts = 0;

		public TripSummaryScreen (IntPtr handle) : base (handle)
		{
			User currentUser = fileManager.readUserFile ();
			totalDistance = rawGPS.convertMetersToKilometers(rawGPS.CalculateDistanceTraveled(new List<CLLocation>(fileManager.readDataFromTripDistanceFile())));

			//Add Recent trip to History
			importedGpsEvents=fileManager.readDataFromTripEventFile ();
			fileManager.addDataToTripLogFile(new Trip(DateTime.Now, importedGpsEvents.Length));


			foreach (var e in importedGpsEvents) {
				if (e.Type== HARD_ACCEL_TYPE) {
					numberOfStarts++;
				}
				if (e.Type == HARD_BRAKE_TYPE) {
					numberOfStops++;
				}
			}
			//Clear Current Trip
			fileManager.clearCurrentTripEventFile();
			fileManager.clearCurrentTripDistanceFile();

			//Update User Data
			currentUser.updateData (totalDistance, numberOfStops, numberOfStarts);
			pointChange = currentUser.getCurrentTripPoints (totalDistance, numberOfStops, numberOfStarts);

			fileManager.updateUserFile (currentUser);
		}

		public override UIInterfaceOrientationMask GetSupportedInterfaceOrientations ()
		{
			return UIInterfaceOrientationMask.Portrait;
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);
			UIApplication.SharedApplication.IdleTimerDisabled = false;

		}
		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			//Updates tripSummaryEventLabel displaying events from this trip
			//distanceLabel.Text = rawGPS.convertMetersToKilometers(rawGPS.CalculateDistanceTraveled(new List<CLLocation>(fileManager.readDataFromTripDistanceFile()))).ToString("0.0");
			hardBrakesLabel.Text = numberOfStops.ToString ();
			numHardStartLabel.Text = numberOfStarts.ToString ();
			//fastAccelsLabel.Text = StopScreen.numberHardAccel.ToString ();
			totalBreakAcessLabel.Text = (numberOfStops + numberOfStarts).ToString();
			//totalBreakAcessLabel.Text = StopScreen.numberHardAccel.ToString ();
			pointsEarnedLabel.Text = pointChange.ToString ();
			//tripSummaryEventsLabel.Text = StopScreenn.fileManager.readDataFromTripEventFile ().Length.ToString();
			tripSummaryEventsLabel.Text = StopScreen.eventcount.ToString ();
			distanceLabel.Text = totalDistance.ToString ("0.0");
		}

		partial void toHome (NSObject sender)
		{
			DismissModalViewControllerAnimated(true);
			StopScreen.fileManager.clearCurrentTripEventFile();
			StopScreen.fileManager.clearCurrentTripDistanceFile();
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);

		}

		public static Event[] getEvents ()
		{
			return importedGpsEvents;
		}
	}
}